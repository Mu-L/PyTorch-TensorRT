name: Build and test Linux wheels

on:
  pull_request:
  push:
    branches:
      - main
      - nightly
      - release/*
    tags:
        # NOTE: Binary build pipelines should only get triggered on release candidate builds
        # Release candidate tags look like: v1.11.0-rc1
        - v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+
  workflow_dispatch:

jobs:
  generate-matrix:
    uses: pytorch/test-infra/.github/workflows/generate_binary_build_matrix.yml@main
    with:
      package-type: wheel
      os: linux
      test-infra-repository: pytorch/test-infra
      test-infra-ref: main
      with-rocm: false
      with-cpu: false

  build:
    needs: generate-matrix
    permissions:
      id-token: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - repository: pytorch/tensorrt
            pre-script: packaging/pre_build_script.sh
            env-var-script: packaging/env_vars.txt
            post-script: packaging/post_build_script.sh
            smoke-test-script: packaging/smoke_test_script.sh
            package-name: torch_tensorrt
    name: Build torch-tensorrt whl package
    uses: pytorch/test-infra/.github/workflows/build_wheels_linux.yml@main
    with:
      repository: ${{ matrix.repository }}
      ref: ""
      test-infra-repository: pytorch/test-infra
      test-infra-ref: main
      build-matrix: ${{ needs.generate-matrix.outputs.matrix }}
      pre-script: ${{ matrix.pre-script }}
      env-var-script: ${{ matrix.env-var-script }}
      post-script: ${{ matrix.post-script }}
      package-name: ${{ matrix.package-name }}
      smoke-test-script: ${{ matrix.smoke-test-script }}
      trigger-event: ${{ github.event_name }}

  check:
    needs: build
    name: Check files
    outputs:
      test_modules: ${{ steps.check_files.outputs.test_modules }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout torch-tensorrt repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
          fetch-depth: 0
      - name: Check modified files
        id: check_files
        run: |
          set -euxo pipefail
          if [ ${{ github.event_name }} == 'pull_request' ]; then
            base=${{ github.event.pull_request.base.sha }}
            head=${{ github.event.pull_request.head.sha }}
            python -m pip install regex
            files=$(git diff --name-only "${base}" "${head}")
            test_modules="$(python .github/scripts/generate_test_module.py --event-name 'pull_request' --files '${files}')"
          else
            test_modules="$(python .github/scripts/generate_test_module.py --event-name ${{ github.event_name }})"
          fi
          echo "test_modules=${test_modules}" >> "${GITHUB_OUTPUT}"

  tests-py-torchscript-fe:
    name: Test torchscript frontend [Python]
    needs: [generate-matrix, build, check]
    if: ${{ contains(needs.check.outputs.test_modules, 'ts_frontend') }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - repository: pytorch/tensorrt
            package-name: torch_tensorrt
            pre-script: packaging/pre_build_script.sh
            post-script: packaging/post_build_script.sh
            smoke-test-script: packaging/smoke_test_script.sh
    uses: ./.github/workflows/linux-test.yml
    with:
      job-name: tests-py-torchscript-fe
      repository: "pytorch/tensorrt"
      ref: ""
      test-infra-repository: pytorch/test-infra
      test-infra-ref: main
      build-matrix: ${{ needs.generate-matrix.outputs.matrix }}
      pre-script: ${{ matrix.pre-script }}
      script: |
        export USE_HOST_DEPS=1
        export LD_LIBRARY_PATH=/usr/lib64:$LD_LIBRARY_PATH
        pushd .
        cd tests/modules
        python hub.py
        popd
        pushd .
        cd tests/py/ts
        python -m pytest --junitxml=${RUNNER_TEST_RESULTS_DIR}/ts_api_test_results.xml api/
        python -m pytest --junitxml=${RUNNER_TEST_RESULTS_DIR}/ts_models_test_results.xml models/
        python -m pytest --junitxml=${RUNNER_TEST_RESULTS_DIR}/ts_integrations_test_results.xml integrations/
        popd

  tests-py-dynamo-converters:
    name: Test dynamo converters [Python]
    needs: [generate-matrix, build, check]
    if: ${{ contains(needs.check.outputs.test_modules, 'dynamo_converter') }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - repository: pytorch/tensorrt
            package-name: torch_tensorrt
            pre-script: packaging/pre_build_script.sh
            post-script: packaging/post_build_script.sh
            smoke-test-script: packaging/smoke_test_script.sh
    uses: ./.github/workflows/linux-test.yml
    with:
      job-name: tests-py-dynamo-converters
      repository: "pytorch/tensorrt"
      ref: ""
      test-infra-repository: pytorch/test-infra
      test-infra-ref: main
      build-matrix: ${{ needs.generate-matrix.outputs.matrix }}
      pre-script: ${{ matrix.pre-script }}
      script: |
        export USE_HOST_DEPS=1
        pushd .
        cd tests/py/dynamo
        python -m pytest --junitxml=${RUNNER_TEST_RESULTS_DIR}/dynamo_converters_test_results.xml -n 10 conversion/
        popd

  tests-py-dynamo-fe:
    name: Test dynamo frontend [Python]
    needs: [generate-matrix, build]
    if: ${{ contains(needs.check.outputs.test_modules, 'dynamo_frontend') }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - repository: pytorch/tensorrt
            package-name: torch_tensorrt
            pre-script: packaging/pre_build_script.sh
            post-script: packaging/post_build_script.sh
            smoke-test-script: packaging/smoke_test_script.sh
    uses: ./.github/workflows/linux-test.yml
    with:
      job-name: tests-py-dynamo-fe
      repository: "pytorch/tensorrt"
      ref: ""
      test-infra-repository: pytorch/test-infra
      test-infra-ref: main
      build-matrix: ${{ needs.generate-matrix.outputs.matrix }}
      pre-script: ${{ matrix.pre-script }}
      script: |
        set -x
        echo "needs.check.outputs.test_modules: ${{ needs.check.outputs.test_modules }}"
        export USE_HOST_DEPS=1
        pushd .
        cd tests/py/dynamo
        python -m pytest --junitxml=${RUNNER_TEST_RESULTS_DIR}/dynamo_fe_test_results.xml --ir dynamo models/test_models_export.py
        python -m pytest --junitxml=${RUNNER_TEST_RESULTS_DIR}/dyn_models_export.xml --ir dynamo models/test_dyn_models.py
        popd

  tests-py-dynamo-serde:
    name: Test dynamo export serde [Python]
    needs: [generate-matrix, build, check]
    if: ${{ contains(needs.check.outputs.test_modules, 'dynamo_serde') }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - repository: pytorch/tensorrt
            package-name: torch_tensorrt
            pre-script: packaging/pre_build_script.sh
            post-script: packaging/post_build_script.sh
            smoke-test-script: packaging/smoke_test_script.sh
    uses: ./.github/workflows/linux-test.yml
    with:
      job-name: tests-py-dynamo-serde
      repository: "pytorch/tensorrt"
      ref: ""
      test-infra-repository: pytorch/test-infra
      test-infra-ref: main
      build-matrix: ${{ needs.generate-matrix.outputs.matrix }}
      pre-script: ${{ matrix.pre-script }}
      script: |
        export USE_HOST_DEPS=1
        pushd .
        cd tests/py/dynamo
        python -m pytest --junitxml=${RUNNER_TEST_RESULTS_DIR}/export_serde_test_results.xml --ir dynamo models/test_export_serde.py
        popd

  tests-py-torch-compile-be:
    name: Test torch compile backend [Python]
    needs: [generate-matrix, build ,check]
    if: ${{ contains(needs.check.outputs.test_modules, 'torch_compile_backend') }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - repository: pytorch/tensorrt
            package-name: torch_tensorrt
            pre-script: packaging/pre_build_script.sh
            post-script: packaging/post_build_script.sh
            smoke-test-script: packaging/smoke_test_script.sh
    uses: ./.github/workflows/linux-test.yml
    with:
      job-name: tests-py-torch-compile-be
      repository: "pytorch/tensorrt"
      ref: ""
      test-infra-repository: pytorch/test-infra
      test-infra-ref: main
      build-matrix: ${{ needs.generate-matrix.outputs.matrix }}
      pre-script: ${{ matrix.pre-script }}
      script: |
        export USE_HOST_DEPS=1
        pushd .
        cd tests/py/dynamo
        python -m pytest -n 10 --junitxml=${RUNNER_TEST_RESULTS_DIR}/torch_compile_be_test_results.xml backend/
        python -m pytest -n 4 --junitxml=${RUNNER_TEST_RESULTS_DIR}/torch_complete_be_e2e_test_results.xml --ir torch_compile models/test_models.py
        python -m pytest --junitxml=${RUNNER_TEST_RESULTS_DIR}/torch_compile_dyn_models_export.xml --ir torch_compile models/test_dyn_models.py
        popd

  tests-py-dynamo-core:
    name: Test dynamo core [Python]
    needs: [generate-matrix, build, check]
    if: ${{ contains(needs.check.outputs.test_modules, 'dynamo_core') }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - repository: pytorch/tensorrt
            package-name: torch_tensorrt
            pre-script: packaging/pre_build_script.sh
            post-script: packaging/post_build_script.sh
            smoke-test-script: packaging/smoke_test_script.sh
    uses: ./.github/workflows/linux-test.yml
    with:
      job-name: tests-py-dynamo-core
      repository: "pytorch/tensorrt"
      ref: ""
      test-infra-repository: pytorch/test-infra
      test-infra-ref: main
      build-matrix: ${{ needs.generate-matrix.outputs.matrix }}
      pre-script: ${{ matrix.pre-script }}
      script: |
        export USE_HOST_DEPS=1
        pushd .
        cd tests/py/dynamo
        python -m pytest -n 4 --junitxml=${RUNNER_TEST_RESULTS_DIR}/tests_py_dynamo_core_runtime_test_results.xml runtime/
        python -m pytest -n 4 --junitxml=${RUNNER_TEST_RESULTS_DIR}/tests_py_dynamo_core_partitioning_test_results.xml partitioning/
        python -m pytest -n 4 --junitxml=${RUNNER_TEST_RESULTS_DIR}/tests_py_dynamo_core_lowering_test_results.xml lowering/
        popd

  tests-py-core:
    name: Test core [Python]
    needs: [generate-matrix, build, check]
    if: ${{ contains(needs.check.outputs.test_modules, 'py_core') }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - repository: pytorch/tensorrt
            package-name: torch_tensorrt
            pre-script: packaging/pre_build_script.sh
            post-script: packaging/post_build_script.sh
            smoke-test-script: packaging/smoke_test_script.sh
    uses: ./.github/workflows/linux-test.yml
    with:
      job-name: tests-py-core
      repository: "pytorch/tensorrt"
      ref: ""
      test-infra-repository: pytorch/test-infra
      test-infra-ref: main
      build-matrix: ${{ needs.generate-matrix.outputs.matrix }}
      pre-script: ${{ matrix.pre-script }}
      script: |
        set -x
        export USE_HOST_DEPS=1
        pushd .
        cd tests/py/core
        python -m pytest -n 4 --junitxml=${RUNNER_TEST_RESULTS_DIR}/tests_py_core_test_results.xml .
        popd

  tests-cpp-core-conversion:
    name: Test core conversion[CPP]
    needs: [generate-matrix, build, check]
    if: ${{ contains(needs.check.outputs.test_modules, 'cpp_core_conversion') }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - repository: pytorch/tensorrt
            package-name: torch_tensorrt
            pre-script: packaging/pre_build_script.sh
            post-script: packaging/post_build_script.sh
            smoke-test-script: packaging/smoke_test_script.sh
    uses: ./.github/workflows/linux-test.yml
    with:
      job-name: tests-cpp-core-conversion
      repository: "pytorch/tensorrt"
      ref: ""
      test-infra-repository: pytorch/test-infra
      test-infra-ref: main
      build-matrix: ${{ needs.generate-matrix.outputs.matrix }}
      pre-script: ${{ matrix.pre-script }}
      script: |
        set -x
        export USE_HOST_DEPS=1
        python -m pip show torch_tensorrt
        location=$(python -m pip show torch_tensorrt | grep Location | sed "s/Location: //g")
        ls -lart $location | grep torch_tensorrt
        bazel test //tests/core/conversion:conversion_tests --compilation_mode=opt \
        --test_output=summary --config use_precompiled_torchtrt --config pre_cxx11_abi --sandbox_debug --verbose_failures --cxxopt='-std=c++17'

  tests-cpp-core-lowering:
    name: Test core lowering[CPP]
    needs: [generate-matrix, build, check]
    if: ${{ contains(needs.check.outputs.test_modules, 'cpp_core_lowering') }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - repository: pytorch/tensorrt
            package-name: torch_tensorrt
            pre-script: packaging/pre_build_script.sh
            post-script: packaging/post_build_script.sh
            smoke-test-script: packaging/smoke_test_script.sh
    uses: ./.github/workflows/linux-test.yml
    with:
      job-name: tests-cpp-core-lowering
      repository: "pytorch/tensorrt"
      ref: ""
      test-infra-repository: pytorch/test-infra
      test-infra-ref: main
      build-matrix: ${{ needs.generate-matrix.outputs.matrix }}
      pre-script: ${{ matrix.pre-script }}
      script: |
        set -x
        export USE_HOST_DEPS=1
        bazel test //tests/core/lowering:lowering_tests --compilation_mode=opt \
        --test_output=summary --config use_precompiled_torchtrt --config pre_cxx11_abi --sandbox_debug --verbose_failures --cxxopt='-std=c++17'

  tests-cpp-core-partitioning:
    name: Test core partitioning[CPP]
    needs: [generate-matrix, build, check]
    if: ${{ contains(needs.check.outputs.test_modules, 'cpp_core_partitioning') }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - repository: pytorch/tensorrt
            package-name: torch_tensorrt
            pre-script: packaging/pre_build_script.sh
            post-script: packaging/post_build_script.sh
            smoke-test-script: packaging/smoke_test_script.sh
    uses: ./.github/workflows/linux-test.yml
    with:
      job-name: tests-cpp-core-partitioning
      repository: "pytorch/tensorrt"
      ref: ""
      test-infra-repository: pytorch/test-infra
      test-infra-ref: main
      build-matrix: ${{ needs.generate-matrix.outputs.matrix }}
      pre-script: ${{ matrix.pre-script }}
      script: |
        set -x
        export USE_HOST_DEPS=1
        bazel test //tests/core/partitioning:partitioning_tests --compilation_mode=opt \
        --test_output=summary --config use_precompiled_torchtrt --config pre_cxx11_abi --sandbox_debug --verbose_failures --cxxopt='-std=c++17'

  tests-cpp-core-runtime:
    name: Test core runtime[CPP]
    needs: [generate-matrix, build, check]
    if: ${{ contains(needs.check.outputs.test_modules, 'cpp_core_runtime') }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - repository: pytorch/tensorrt
            package-name: torch_tensorrt
            pre-script: packaging/pre_build_script.sh
            post-script: packaging/post_build_script.sh
            smoke-test-script: packaging/smoke_test_script.sh
    uses: ./.github/workflows/linux-test.yml
    with:
      job-name: tests-cpp-core-runtime
      repository: "pytorch/tensorrt"
      ref: ""
      test-infra-repository: pytorch/test-infra
      test-infra-ref: main
      build-matrix: ${{ needs.generate-matrix.outputs.matrix }}
      pre-script: ${{ matrix.pre-script }}
      script: |
        set -x
        export USE_HOST_DEPS=1
        bazel test //tests/core/runtime:runtime_tests --compilation_mode=opt \
        --test_output=summary --config use_precompiled_torchtrt --config pre_cxx11_abi --sandbox_debug --verbose_failures --cxxopt='-std=c++17'
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref_name }}-${{ inputs.repository }}-${{ github.event_name == 'workflow_dispatch' }}-${{ inputs.job-name }}
  cancel-in-progress: true
